/* stylelint-disable block-closing-brace-space-before */

/**
 * Media query: Respond above
 * @param {String} $key
 * @param {Boolean} $key
 * @require $breakpoints
 */
@mixin respond-above($key, $container-query: false) {
  @if map-has-key($breakpoints, $key) {
    @if $container-query {
      @media (min-width: #{map-get($breakpoints, $key)}) {
        html:not(.cq) #{ if(&, "&", "*") } { @content; };
      }

      /* stylelint-disable-next-line scss/at-rule-no-unknown, at-rule-no-unknown */
      @container (min-width: #{map-get($breakpoints, $key)}) {
        @content;
      }
    } @else {
      @media (min-width: #{map-get($breakpoints, $key)}) {
        @content;
      }
    }
  }

  @else {
    @warn "Invalid breakpoint: #{$key}.";
  }
}

/**
 * Media query: Respond below
 * @param {String} $key
 * @require $breakpoints
 */
@mixin respond-below($key, $container-query: false) {
  @if map-has-key($breakpoints, $key) {
    @if $container-query {
      @media (max-width: #{map-get($breakpoints, $key) - 1}) {
        html:not(.cq) #{ if(&, "&", "*") } { @content; };
      }

      /* stylelint-disable-next-line scss/at-rule-no-unknown, at-rule-no-unknown */
      @container (max-width: #{map-get($breakpoints, $key) - 1}) {
        @content;
      }
    } @else {
      @media (max-width: #{map-get($breakpoints, $key) - 1}) {
        @content;
      }
    }
  }

  @else {
    @warn "Invalid breakpoint: #{$key}.";
  }
}

/**
 * Media query: Respond between
 * @param {String} $lower
 * @param {String} $upper
 * @require $breakpoints
 */
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    @media (min-width: #{map-get($breakpoints, $lower)}) and (max-width: #{map-get($breakpoints, $upper) - 1}) {
      @content;
    }
  }

  @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn "Your lower breakpoint was invalid: #{$lower}.";
    }

    @if (map-has-key($breakpoints, $upper) == false) {
      @warn "Your upper breakpoint was invalid: #{$upper}.";
    }
  }
}

/**
 * CLEARFIX
 * Mixin to drop micro clearfix into a selector. Further reading:
 * http://www.cssmojo.com/the-very-latest-clearfix-reloaded/

 * .usage {
 *   @include clearfix();
 * }
 */
@mixin clearfix() {
  &::after {
    content: "" !important;
    display: block !important;
    clear: both !important;
  }
}

@mixin color-shades($name, $value) {
  --#{$color}-#{$name}-50: #{mix(white, $value, 95%)};
  --#{$color}-#{$name}-100: #{mix(white, $value, 80%)};
  --#{$color}-#{$name}-200: #{mix(white, $value, 60%)};
  --#{$color}-#{$name}-300: #{mix(white, $value, 40%)};
  --#{$color}-#{$name}-400: #{mix(white, $value, 20%)};
  --#{$color}-#{$name}-500: #{$value};
  --#{$color}-#{$name}-600: #{mix(black, $value, 20%)};
  --#{$color}-#{$name}-700: #{mix(black, $value, 40%)};
  --#{$color}-#{$name}-800: #{mix(black, $value, 60%)};
  --#{$color}-#{$name}-900: #{mix(black, $value, 80%)};
  --#{$color}-#{$name}-950: #{mix(black, $value, 95%)};
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-font-size, $max-font-size, $min-vw: 414px, $max-vw: 1440px) {
  @include fluid(font-size, $min-font-size, $max-font-size, $min-vw, $max-vw);
}

@mixin fluid-width($min-value, $max-value, $min-vw: 414px, $max-vw: 1440px) {
  @include fluid(width, $min-value, $max-value, $min-vw, $max-vw);
}

@mixin fluid-height($min-value, $max-value, $min-vw: 414px, $max-vw: 1440px) {
  @include fluid(height, $min-value, $max-value, $min-vw, $max-vw);
}

@mixin fluid($property, $min-value, $max-value, $min-vw: 414px, $max-vw: 1440px) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-value);
  $u4: unit($max-value);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      #{$property}: $min-value;

      @media (min-width: $min-vw) {
        /* stylelint-disable-next-line max-line-length */
        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media (min-width: $max-vw) {
        #{$property}: $max-value;
      }
    }
  }
}

/**
 * Force the use of the css function in favour of scss
 * https://github.com/sass/sass/issues/2849#issuecomment-621991522
 */
@function css-function($function, $values...) {
  @return $function + unquote("(") + $values + unquote(")");
}

@function css-min($values...) {
  @return css-function(min, $values);
}

@function css-max($values...) {
  @return css-function(max, $values);
}

@function css-clamp($values...) {
  @return css-function(clamp, $values);
}

/**
 * Make responsive versions of the classname
 *
 * @include make-responsive(u-hidden) { display: none; }
 *
 * -md\:u-hidden { respond-below("md") { ... } }
 * sm-lg\:u-hidden { respond-between("sm","md") { ... } }
 * xl\:u-hidden { respond-above("md") { ... } }
 */
@mixin make-responsive($classname, $breakpoints: $breakpoints) {
  $steps: map-keys($breakpoints);

  @each $size in $steps {
    $index: index($steps, $size);
    .-#{$size}\:#{$classname} {
      @include respond-below($size) {
        @content;
      }
    }
    .#{$size}\:#{$classname} {
      @include respond-above($size) {
        @content;
      }
    }

    @each $size_inner in $steps {
      @if $index < index($steps, $size_inner) {
        .#{$size}-#{$size_inner}\:#{$classname} {
          @include respond-between($size, $size_inner) {
            @content;
          }
        }
      }
    }
  }
}
